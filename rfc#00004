# 00004: Trust anchors and pivots
- Authors: [Mike Bursell](you@github-email)
- Status: [PROPOSED](/README.md#proposed)
- Since: 2020-02-14
- Status Note: under discussion
- Start Date: 2020-02-14 (date you started working on this idea)
- Tags: trust
- Addresses: (Issue #)[https://github.com/enarx/enarx/issues/]

## Summary

TODO...

Trust domains are a key concept within Enarx.  This RFC provides an
introduction to trust domains in Enarx.

## Motivation

In order to explain the motivations behind Enarx, our design principles
and aims, we need to be able to explain what trust domains are.  This RFC
attempts to provide an introduction.

## Tutorial

See rfc#00002 for an introduction to trust relationships.

### Applying trust relationships to Enarx
The key trust relationship for Enarx is that held by the tenant
(workload owner) to that workload.  Enarx aims to provide assurances to
the tenant that the integrity and confidentiality of that workload are
protected: these are the key contexts of that trust, and actions can be
assured if they are maintained.  Trust may decay or be built up in the
workload - the time context.  In this case, the workload does not have an
equivalent set of assurances about the tenant, so the relationship is
not symmetrical.

See rfc#00002 for an introduction to trust relationships.

### Applying trust domains to Enarx - default model
There are various possible models for trust domains in an Enarx
deployment - this section describes the simplest, and default model.
In the default Enarx model, we start off by defining the following parties
- tenant
- host owner (the host operator may be separate, but is considered to
be the same for this description)
- entities running processes on the host (includes other workloads
and compromised processes)
- man-in-the-middle entities
Clearly, the first two are the key actors - the others are included for
reference (though a threat model is not defined here).

The following components are defined:
- host 
- host CPU + CPU firmware
- Orchestrator (e.g. Kubernetes, Openshift, Openstack)
- Enarx client agent (ECA)
- Enarx host agent (EHA)
- TEE instance
- Empty Keep
- Provisioned Keep
- Tenant workload
Not all of these exist at all points in the process.



### Applications and trust domains in Enarx


## Reference

rfc#00002

## Drawbacks

n/a

## Rationale and alternatives

n/a

## Prior art

n/a

## Unresolved questions

- What parts of the design do you expect to resolve through the
RFC process before this gets merged?
- What parts of the design do you expect to resolve through the
implementation of this feature before stabilization?
- What related issues do you consider out of scope for this 
proposal that could be addressed in the future independently of the
solution that comes out of this doc?

## Implementations

None.

## Future Possibilities

- Threat models should be documented and published as RFCs (Issue #240)[https://github.com/enarx/enarx/issues/240]
- Status of hardware/firmware in trust relationships in Enarx
needs to be documented (Issue #193)[https://github.com/enarx/enarx/issues/193]